initSidebarItems({"enum":[["Authority",""],["Data","This is the data types routing handles in the public interface"],["DataRequest",""],["Event","An Event is received at the effective close group of B of a message flow < A | B > 1. Event::MessageSecured provides the RoutingMessage after being secured by routing,    our authority provides the base authority as validated by routing.    When the from_authority in routing message is a Client or ManagedNode, the original    signature is provided for reply or response. 2. Event::Refresh has accumulated Refresh messages centered on a name for a type_tag.    This can be used to transfer accounts between nodes of an effective close group. 3. Event::Churn occurs when our close group changes.  The new close group is provided.    Our close group always contains our own name first.  When we are connected to other    nodes the list contains minimally two names. 4. Event::Terminated is called after RoutingNode::stop() has ensured all message queues    are processed and empty."],["ExternalRequest","These are the messageTypes routing provides"],["ExternalResponse",""],["ImmutableDataType",""],["InterfaceError",""],["ResponseError","represents response errors"],["RoutingError","Represents routing error types"]],"fn":[["closer_to_target","Returns true if `lhs` is closer to `target` than `rhs`.  \"Closer\" here is as per the Kademlia notion of XOR distance, i.e. the distance between two `NameType`s is the bitwise XOR of their values."]],"struct":[["ImmutableData","ImmutableData hash == SHA512"],["NameType","NameType can be created using the new function by passing ID as itâ€™s parameter."],["SignedToken",""],["StructuredData","StructuredData These types may be stored unsigned with previous and current owner keys set to the same keys. Updates though require a signature to validate"]],"trait":[["Sendable","This trait is required for any type of message to be passed to routing, refresh / account transfer is optional The name will let routing know its a NaeManager and the owner will allow routing to hash the requesters ID with this name (by hashing the requesters ID) for put and post messages"]]});